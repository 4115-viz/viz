{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \expnd0\expndtw0\kerning0
=========1==== hello world, and interface\
\'a0\
/*\
Welcome to VizOnline, the official online editor of the Viz programming language.\
*/\
\'a0\
func main(): none \{\
\'a0\'a0\'a0 print("Welcome to the Viz programming language!");\
\}\
\'a0\
==========2== symbol table\
\'a0\
func main() : none \{\
\'a0\'a0\'a0 \
\'a0\'a0\'a0 @x: int = 500;\
\'a0\'a0\'a0 print("x before nested scope = " + |as string| @x);\
\'a0\'a0\'a0 \
\'a0\'a0\'a0 \{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 print("====================");\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 print("inside nested scope");\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 print("x before reassign = " + |as string| @x);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 @x = 600;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 print("x after reassign = " + |as string| @x);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 print("====================");\
\'a0\'a0\'a0 \};\
\'a0\'a0\'a0 \
\'a0\'a0\'a0 print("x after nested scope = " + |as string| @x);\
\'a0\
\}\
\'a0\
=============3======== Structs\
\'a0\
struct Person \{\
\'a0\'a0\'a0 @name: string;\
\'a0\'a0\'a0 @age: int;\
\'a0\'a0\'a0 @graduated: bool;\
\}\
\'a0\
func init_person(@name: string, @age: int, @graduated: bool): Person \{\
\'a0\'a0\'a0 \
\'a0\'a0\'a0 print("using parameters, passed in instantiate struct and return it");\
\'a0\'a0\'a0 \
\'a0\'a0\'a0 @my_person: Person;\
\'a0\'a0\'a0 @my_person.name = @name;\
\'a0\'a0\'a0 @my_person.age = @age;\
\'a0\'a0\'a0 @my_person.graduated = @graduated;\
\'a0\
\'a0\'a0\'a0 return @my_person;\
\'a0\
\}\
\'a0\
func show_person_details(@my_person: Person): none \{\
\'a0\'a0\'a0 \
\'a0\'a0\'a0 print("passing struct to function, and printing the members");\
\'a0\
\'a0\'a0\'a0 print(@my_person.name);\
\'a0\'a0\'a0 print(@my_person.age);\
\'a0\'a0\'a0 if (@my_person.graduated) \{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 print(@my_person.name + " has graduated :)");\
\'a0\'a0\'a0 \} else \{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 print(@my_person.name + " has not graduated :(");\
\'a0\'a0\'a0 \}\
\'a0\
\}\
\'a0\
func main() : none \{\
\'a0\
\'a0\'a0\'a0 @matt: Person;\
\'a0\'a0\'a0 @matt.name = "Matt Duran";\
\'a0\'a0\'a0 @matt.age = 29;\
\'a0\'a0\'a0 @matt.graduated = true;\
\'a0\'a0\'a0 show_person_details(@matt);\
\'a0\'a0\'a0 print("=======");\
\'a0\'a0\'a0 println();\
\'a0\
\'a0\'a0\'a0 @yanhao: Person = init_person("yanhao", 25, true);\
\'a0\'a0\'a0 show_person_details(@yanhao);\
\'a0\'a0\'a0 print("=======");\
\'a0\'a0\'a0 println();\
\'a0\
\}\
\'a0\
=======================list stuff===========\
\'a0\
func main() : none \{\
\'a0\
\'a0\'a0\'a0 \
\'a0\'a0\'a0 // instantiate a list\
\'a0\'a0 \'a0@a: list |int| = [1,4,5,7,5,12,133];\
\'a0\'a0\'a0 \
\'a0\'a0\'a0 // initializer list for int variables\
\'a0\'a0\'a0 @idx, @len, @tmp -> (int, 0);\
\'a0\
\'a0\'a0\'a0 // list library function\
\'a0\'a0\'a0 @len = list_len(@a);\
\'a0\
\'a0\'a0\'a0 print("========");\'a0 \
\'a0\
\'a0\'a0\'a0 // print list\
\'a0\'a0\'a0 print(@a);\
\'a0\
\'a0\'a0\'a0 // casting, and string c lib\
\'a0\'a0\'a0 print("list length = " + |as string| @len);\
\'a0\
\'a0\'a0\'a0 print("========");\'a0 \
\'a0\
\'a0\'a0\'a0 // for loop through a list\
\'a0\'a0\'a0 for @idx in 0 ... < @len \{\
\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 // access the array element\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 @tmp = @a[@idx];\
\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 if ( @tmp % 2 == 0) \{\
\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 @tmp_str: string = to_upper(|as string| @tmp + " is an even number :)");\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 //print(|as string| @tmp + " is an even number :)");\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 print(@tmp_str);\
\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \} else \{\
\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 print(|as string| @tmp + " is an odd number :(");\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 // make the item even\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 @a[@idx] = @tmp * 2;\
\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \}\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \
\'a0\'a0\'a0 \}\
\'a0\'a0\'a0 \
\'a0\'a0\'a0 // now everything is even\
\'a0\'a0\'a0 print(@a);\
\'a0\'a0\'a0 print("========");\
\'a0\
\'a0\'a0\'a0 // pop an element\
\'a0\'a0\'a0 @tmp = pop(@a);\
\'a0\'a0\'a0 print("popped tail element, which is " + |as string| @tmp);\
\'a0\'a0\'a0 \
\'a0\'a0\'a0 // push a new element\
\'a0\'a0\'a0 push(@a, 4115);\
\'a0\'a0\'a0 print(@a); \
\'a0\
\}\
}